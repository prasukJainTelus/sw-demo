/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { precacheAndRoute } from "workbox-precaching";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// debugger;
precacheAndRoute((self.__WB_MANIFEST || []).filter((_) => false));
// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})

// Any other custom service worker logic can go here.
self.addEventListener("install", (event) => {
  event.waitUntil(self.skipWaiting());
});

async function cleanup(url: string): Promise<Response> {
  const fixedUrl = url.replace("-cleanup", ""); // fixedUrl
  const cache = await caches.open("image-cache");
  let res = await cache.match(fixedUrl);
  if (res) await cache.delete(fixedUrl);
  return new Response("OK", { status: 200 });
}

self.addEventListener("fetch", (ev) => {
  ev.respondWith(
    (async () => {
      const url: string = ev.request.url;

      if (url.endsWith("-cleanup")) {
        return cleanup(url);
      }
      if (!url.endsWith(".jpg")) {
        return await fetch(ev.request);
      }
      return caches
        .match(url)
        .then((cacheRes) => {
          if (cacheRes) {
            return cacheRes;
          }
          return fetch(url).then((fetchResponse: Response) => {
            const type: string | null =
              fetchResponse.headers.get("content-type");
            if (
              type &&
              type.match(/^((application\/octet-stream)|(image\/jpeg))/i)
            ) {
              return caches.open("image-cache").then((cache) => {
                cache.put(url, fetchResponse.clone());
                return fetchResponse;
              });
            }
            return fetchResponse;
          });
        })
        .catch((err) => {
          return new Response("unable to fetch", { status: 500 });
        });
    })()
  );
});
